//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.832
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 2.0.50727.832에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace NETS_iMan.chatWebsvc {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ChatServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ChatService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AbsentUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback BusyUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOfflineMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveOfflineMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendGroupMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveGroupMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ErrorReportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ChatService() {
            this.Url = global::NETS_iMan.Properties.Settings.Default.NETS_iMan_chatWebsvc_ChatService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
        
        /// <remarks/>
        public event GetAllGroupsCompletedEventHandler GetAllGroupsCompleted;
        
        /// <remarks/>
        public event GetGroupUsersCompletedEventHandler GetGroupUsersCompleted;
        
        /// <remarks/>
        public event GetLoginUsersCompletedEventHandler GetLoginUsersCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event RemoveUserCompletedEventHandler RemoveUserCompleted;
        
        /// <remarks/>
        public event AbsentUserCompletedEventHandler AbsentUserCompleted;
        
        /// <remarks/>
        public event BusyUserCompletedEventHandler BusyUserCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event ReceiveMessageCompletedEventHandler ReceiveMessageCompleted;
        
        /// <remarks/>
        public event SendOfflineMessageCompletedEventHandler SendOfflineMessageCompleted;
        
        /// <remarks/>
        public event ReceiveOfflineMessageCompletedEventHandler ReceiveOfflineMessageCompleted;
        
        /// <remarks/>
        public event CreateGroupCompletedEventHandler CreateGroupCompleted;
        
        /// <remarks/>
        public event AddUserGroupCompletedEventHandler AddUserGroupCompleted;
        
        /// <remarks/>
        public event RemoveUserGroupCompletedEventHandler RemoveUserGroupCompleted;
        
        /// <remarks/>
        public event SendGroupMessageCompletedEventHandler SendGroupMessageCompleted;
        
        /// <remarks/>
        public event ReceiveGroupMessageCompletedEventHandler ReceiveGroupMessageCompleted;
        
        /// <remarks/>
        public event ErrorReportCompletedEventHandler ErrorReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllUsers(string adminID) {
            object[] results = this.Invoke("GetAllUsers", new object[] {
                        adminID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(string adminID) {
            this.GetAllUsersAsync(adminID, null);
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(string adminID, object userState) {
            if ((this.GetAllUsersOperationCompleted == null)) {
                this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllUsers", new object[] {
                        adminID}, this.GetAllUsersOperationCompleted, userState);
        }
        
        private void OnGetAllUsersOperationCompleted(object arg) {
            if ((this.GetAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllGroups", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllGroups(string adminID) {
            object[] results = this.Invoke("GetAllGroups", new object[] {
                        adminID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllGroupsAsync(string adminID) {
            this.GetAllGroupsAsync(adminID, null);
        }
        
        /// <remarks/>
        public void GetAllGroupsAsync(string adminID, object userState) {
            if ((this.GetAllGroupsOperationCompleted == null)) {
                this.GetAllGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAllGroups", new object[] {
                        adminID}, this.GetAllGroupsOperationCompleted, userState);
        }
        
        private void OnGetAllGroupsOperationCompleted(object arg) {
            if ((this.GetAllGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllGroupsCompleted(this, new GetAllGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGroupUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGroupUsers(string groupID) {
            object[] results = this.Invoke("GetGroupUsers", new object[] {
                        groupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupUsersAsync(string groupID) {
            this.GetGroupUsersAsync(groupID, null);
        }
        
        /// <remarks/>
        public void GetGroupUsersAsync(string groupID, object userState) {
            if ((this.GetGroupUsersOperationCompleted == null)) {
                this.GetGroupUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupUsersOperationCompleted);
            }
            this.InvokeAsync("GetGroupUsers", new object[] {
                        groupID}, this.GetGroupUsersOperationCompleted, userState);
        }
        
        private void OnGetGroupUsersOperationCompleted(object arg) {
            if ((this.GetGroupUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupUsersCompleted(this, new GetGroupUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoginUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLoginUsers() {
            object[] results = this.Invoke("GetLoginUsers", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoginUsersAsync() {
            this.GetLoginUsersAsync(null);
        }
        
        /// <remarks/>
        public void GetLoginUsersAsync(object userState) {
            if ((this.GetLoginUsersOperationCompleted == null)) {
                this.GetLoginUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginUsersOperationCompleted);
            }
            this.InvokeAsync("GetLoginUsers", new object[0], this.GetLoginUsersOperationCompleted, userState);
        }
        
        private void OnGetLoginUsersOperationCompleted(object arg) {
            if ((this.GetLoginUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginUsersCompleted(this, new GetLoginUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUser(string userID) {
            this.Invoke("AddUser", new object[] {
                        userID});
        }
        
        /// <remarks/>
        public void AddUserAsync(string userID) {
            this.AddUserAsync(userID, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(string userID, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        userID}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUser(string userID) {
            this.Invoke("RemoveUser", new object[] {
                        userID});
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string userID) {
            this.RemoveUserAsync(userID, null);
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string userID, object userState) {
            if ((this.RemoveUserOperationCompleted == null)) {
                this.RemoveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserOperationCompleted);
            }
            this.InvokeAsync("RemoveUser", new object[] {
                        userID}, this.RemoveUserOperationCompleted, userState);
        }
        
        private void OnRemoveUserOperationCompleted(object arg) {
            if ((this.RemoveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbsentUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AbsentUser(string userID, bool isAbsent) {
            this.Invoke("AbsentUser", new object[] {
                        userID,
                        isAbsent});
        }
        
        /// <remarks/>
        public void AbsentUserAsync(string userID, bool isAbsent) {
            this.AbsentUserAsync(userID, isAbsent, null);
        }
        
        /// <remarks/>
        public void AbsentUserAsync(string userID, bool isAbsent, object userState) {
            if ((this.AbsentUserOperationCompleted == null)) {
                this.AbsentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbsentUserOperationCompleted);
            }
            this.InvokeAsync("AbsentUser", new object[] {
                        userID,
                        isAbsent}, this.AbsentUserOperationCompleted, userState);
        }
        
        private void OnAbsentUserOperationCompleted(object arg) {
            if ((this.AbsentUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AbsentUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BusyUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BusyUser(string userID, bool isBusy) {
            this.Invoke("BusyUser", new object[] {
                        userID,
                        isBusy});
        }
        
        /// <remarks/>
        public void BusyUserAsync(string userID, bool isBusy) {
            this.BusyUserAsync(userID, isBusy, null);
        }
        
        /// <remarks/>
        public void BusyUserAsync(string userID, bool isBusy, object userState) {
            if ((this.BusyUserOperationCompleted == null)) {
                this.BusyUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBusyUserOperationCompleted);
            }
            this.InvokeAsync("BusyUser", new object[] {
                        userID,
                        isBusy}, this.BusyUserOperationCompleted, userState);
        }
        
        private void OnBusyUserOperationCompleted(object arg) {
            if ((this.BusyUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BusyUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMessage(string strFromUser, string strToUser, string strMess) {
            this.Invoke("SendMessage", new object[] {
                        strFromUser,
                        strToUser,
                        strMess});
        }
        
        /// <remarks/>
        public void SendMessageAsync(string strFromUser, string strToUser, string strMess) {
            this.SendMessageAsync(strFromUser, strToUser, strMess, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string strFromUser, string strToUser, string strMess, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        strFromUser,
                        strToUser,
                        strMess}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceiveMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveMessage(string strUser) {
            object[] results = this.Invoke("ReceiveMessage", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveMessageAsync(string strUser) {
            this.ReceiveMessageAsync(strUser, null);
        }
        
        /// <remarks/>
        public void ReceiveMessageAsync(string strUser, object userState) {
            if ((this.ReceiveMessageOperationCompleted == null)) {
                this.ReceiveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveMessageOperationCompleted);
            }
            this.InvokeAsync("ReceiveMessage", new object[] {
                        strUser}, this.ReceiveMessageOperationCompleted, userState);
        }
        
        private void OnReceiveMessageOperationCompleted(object arg) {
            if ((this.ReceiveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveMessageCompleted(this, new ReceiveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendOfflineMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendOfflineMessage(string strFromUser, string strToUser, string strMess) {
            this.Invoke("SendOfflineMessage", new object[] {
                        strFromUser,
                        strToUser,
                        strMess});
        }
        
        /// <remarks/>
        public void SendOfflineMessageAsync(string strFromUser, string strToUser, string strMess) {
            this.SendOfflineMessageAsync(strFromUser, strToUser, strMess, null);
        }
        
        /// <remarks/>
        public void SendOfflineMessageAsync(string strFromUser, string strToUser, string strMess, object userState) {
            if ((this.SendOfflineMessageOperationCompleted == null)) {
                this.SendOfflineMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOfflineMessageOperationCompleted);
            }
            this.InvokeAsync("SendOfflineMessage", new object[] {
                        strFromUser,
                        strToUser,
                        strMess}, this.SendOfflineMessageOperationCompleted, userState);
        }
        
        private void OnSendOfflineMessageOperationCompleted(object arg) {
            if ((this.SendOfflineMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOfflineMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceiveOfflineMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveOfflineMessage(string strUser) {
            object[] results = this.Invoke("ReceiveOfflineMessage", new object[] {
                        strUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveOfflineMessageAsync(string strUser) {
            this.ReceiveOfflineMessageAsync(strUser, null);
        }
        
        /// <remarks/>
        public void ReceiveOfflineMessageAsync(string strUser, object userState) {
            if ((this.ReceiveOfflineMessageOperationCompleted == null)) {
                this.ReceiveOfflineMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveOfflineMessageOperationCompleted);
            }
            this.InvokeAsync("ReceiveOfflineMessage", new object[] {
                        strUser}, this.ReceiveOfflineMessageOperationCompleted, userState);
        }
        
        private void OnReceiveOfflineMessageOperationCompleted(object arg) {
            if ((this.ReceiveOfflineMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveOfflineMessageCompleted(this, new ReceiveOfflineMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateGroup() {
            object[] results = this.Invoke("CreateGroup", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateGroupAsync() {
            this.CreateGroupAsync(null);
        }
        
        /// <remarks/>
        public void CreateGroupAsync(object userState) {
            if ((this.CreateGroupOperationCompleted == null)) {
                this.CreateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGroupOperationCompleted);
            }
            this.InvokeAsync("CreateGroup", new object[0], this.CreateGroupOperationCompleted, userState);
        }
        
        private void OnCreateGroupOperationCompleted(object arg) {
            if ((this.CreateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGroupCompleted(this, new CreateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserGroup(string userID, string groupID) {
            this.Invoke("AddUserGroup", new object[] {
                        userID,
                        groupID});
        }
        
        /// <remarks/>
        public void AddUserGroupAsync(string userID, string groupID) {
            this.AddUserGroupAsync(userID, groupID, null);
        }
        
        /// <remarks/>
        public void AddUserGroupAsync(string userID, string groupID, object userState) {
            if ((this.AddUserGroupOperationCompleted == null)) {
                this.AddUserGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserGroupOperationCompleted);
            }
            this.InvokeAsync("AddUserGroup", new object[] {
                        userID,
                        groupID}, this.AddUserGroupOperationCompleted, userState);
        }
        
        private void OnAddUserGroupOperationCompleted(object arg) {
            if ((this.AddUserGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserGroup(string userID, string groupID) {
            this.Invoke("RemoveUserGroup", new object[] {
                        userID,
                        groupID});
        }
        
        /// <remarks/>
        public void RemoveUserGroupAsync(string userID, string groupID) {
            this.RemoveUserGroupAsync(userID, groupID, null);
        }
        
        /// <remarks/>
        public void RemoveUserGroupAsync(string userID, string groupID, object userState) {
            if ((this.RemoveUserGroupOperationCompleted == null)) {
                this.RemoveUserGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveUserGroup", new object[] {
                        userID,
                        groupID}, this.RemoveUserGroupOperationCompleted, userState);
        }
        
        private void OnRemoveUserGroupOperationCompleted(object arg) {
            if ((this.RemoveUserGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendGroupMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendGroupMessage(string strFromUser, string groupID, string strMess) {
            this.Invoke("SendGroupMessage", new object[] {
                        strFromUser,
                        groupID,
                        strMess});
        }
        
        /// <remarks/>
        public void SendGroupMessageAsync(string strFromUser, string groupID, string strMess) {
            this.SendGroupMessageAsync(strFromUser, groupID, strMess, null);
        }
        
        /// <remarks/>
        public void SendGroupMessageAsync(string strFromUser, string groupID, string strMess, object userState) {
            if ((this.SendGroupMessageOperationCompleted == null)) {
                this.SendGroupMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendGroupMessageOperationCompleted);
            }
            this.InvokeAsync("SendGroupMessage", new object[] {
                        strFromUser,
                        groupID,
                        strMess}, this.SendGroupMessageOperationCompleted, userState);
        }
        
        private void OnSendGroupMessageOperationCompleted(object arg) {
            if ((this.SendGroupMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendGroupMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceiveGroupMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveGroupMessage(string strUser, string groupID) {
            object[] results = this.Invoke("ReceiveGroupMessage", new object[] {
                        strUser,
                        groupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveGroupMessageAsync(string strUser, string groupID) {
            this.ReceiveGroupMessageAsync(strUser, groupID, null);
        }
        
        /// <remarks/>
        public void ReceiveGroupMessageAsync(string strUser, string groupID, object userState) {
            if ((this.ReceiveGroupMessageOperationCompleted == null)) {
                this.ReceiveGroupMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveGroupMessageOperationCompleted);
            }
            this.InvokeAsync("ReceiveGroupMessage", new object[] {
                        strUser,
                        groupID}, this.ReceiveGroupMessageOperationCompleted, userState);
        }
        
        private void OnReceiveGroupMessageOperationCompleted(object arg) {
            if ((this.ReceiveGroupMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveGroupMessageCompleted(this, new ReceiveGroupMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ErrorReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ErrorReport(string userID, string errorMsg) {
            this.Invoke("ErrorReport", new object[] {
                        userID,
                        errorMsg});
        }
        
        /// <remarks/>
        public void ErrorReportAsync(string userID, string errorMsg) {
            this.ErrorReportAsync(userID, errorMsg, null);
        }
        
        /// <remarks/>
        public void ErrorReportAsync(string userID, string errorMsg, object userState) {
            if ((this.ErrorReportOperationCompleted == null)) {
                this.ErrorReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnErrorReportOperationCompleted);
            }
            this.InvokeAsync("ErrorReport", new object[] {
                        userID,
                        errorMsg}, this.ErrorReportOperationCompleted, userState);
        }
        
        private void OnErrorReportOperationCompleted(object arg) {
            if ((this.ErrorReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ErrorReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetAllGroupsCompletedEventHandler(object sender, GetAllGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetGroupUsersCompletedEventHandler(object sender, GetGroupUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetLoginUsersCompletedEventHandler(object sender, GetLoginUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AbsentUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void BusyUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReceiveMessageCompletedEventHandler(object sender, ReceiveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendOfflineMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReceiveOfflineMessageCompletedEventHandler(object sender, ReceiveOfflineMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveOfflineMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveOfflineMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void CreateGroupCompletedEventHandler(object sender, CreateGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddUserGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveUserGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendGroupMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReceiveGroupMessageCompletedEventHandler(object sender, ReceiveGroupMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveGroupMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveGroupMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ErrorReportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591